<script>
import { onMount, onDestroy } from 'svelte';
import { fade } from 'svelte/transition';
import NDK from "@nostr-dev-kit/ndk";
import { eventsStore, profilesStore } from '../utils/store.js';
import { searchStore } from '../lib/stores/searchStore';
import EventGrid from './EventGrid.svelte';

let eventsKind1 = [];
let filteredEvents = [];
let profiles = {};
let isLoading = true;
let searchQuery = '';

let ndk;
let subscriptionKind1;
let subscriptionKind0;

// Subscribe to search store changes
searchStore.subscribe(value => {
  searchQuery = value.query;
  updateFilteredEvents();
});

function updateFilteredEvents() {
  if (!searchQuery) {
    filteredEvents = eventsKind1;
    return;
  }

  const searchLower = searchQuery.toLowerCase();
  filteredEvents = eventsKind1.filter(event => {
    const details = extractEventDetails(event.tags);
    return (
      details.title?.toLowerCase().includes(searchLower) ||
      details.description?.toLowerCase().includes(searchLower) ||
      details.location?.toLowerCase().includes(searchLower)
    );
  });
}

function handleSearchClear() {
  searchQuery = '';
  updateFilteredEvents();
}

function extractEventDetails(tags) {
  const eventDetails = {};
  if (!tags) return eventDetails;
  
  tags.forEach(([key, value]) => {
    switch (key) {
      case 'title':
        eventDetails.title = value;
        break;
      case 'description':
        eventDetails.description = value;
        break;
      case 'location':
        eventDetails.location = value;
        break;
    }
  });
  return eventDetails;
}

onMount(async () => {
  try {
    ndk = new NDK({
      explicitRelayUrls: [
        'wss://relay.damus.io',
        'wss://nos.lol',
        'wss://relay.nostr.band'
      ]
    });

    await ndk.connect();
    console.log("Connected to relay");
    
    const seenEventIds = new Set();
    const subscribedPubkeys = new Set();

    const subscribeToProfiles = (pubkeys) => {
      const newPubkeys = pubkeys.filter(pubkey => !subscribedPubkeys.has(pubkey));
      
      if (newPubkeys.length === 0) return;
      
      console.log("Subscribing to profiles for pubkeys:", newPubkeys);
      newPubkeys.forEach(pubkey => subscribedPubkeys.add(pubkey));
      
      subscriptionKind0 = ndk.subscribe({
        kinds: [0],
        authors: newPubkeys,
      });

      subscriptionKind0.on('event', (event) => {
        try {
          const profile = JSON.parse(event.content);
          profiles = { ...profiles, [event.pubkey]: { ...profile, pubkey: event.pubkey } };
          profilesStore.update(p => ({ ...p, [event.pubkey]: { ...profile, pubkey: event.pubkey } }));
        } catch (e) {
          console.error("Error parsing profile:", e);
        }
      });
    };

    subscriptionKind1 = ndk.subscribe({
      kinds: [31923],
      since: Math.floor(Date.now() / 1000) - 24 * 60 * 60
    });

    subscriptionKind1.on('event', (event) => {
      if (!seenEventIds.has(event.id)) {
        seenEventIds.add(event.id);
        eventsKind1 = [...eventsKind1, event];
        eventsStore.update(events => [...events, event]);
        
        if (!subscribedPubkeys.has(event.pubkey)) {
          subscribeToProfiles([event.pubkey]);
        }
      }
    });

    isLoading = false;
  } catch (error) {
    console.error("Error connecting to relay:", error);
    isLoading = false;
  }
});

onDestroy(() => {
  if (subscriptionKind1) subscriptionKind1.unsubscribe();
  if (subscriptionKind0) subscriptionKind0.unsubscribe();
});

$: visibleEvents = filteredEvents.length > 0 ? filteredEvents : eventsKind1;
</script>

{#if isLoading}
  <div class="loading-overlay">
    <div class="loading-spinner"></div>
    <span>Loading events and profiles...</span>
  </div>
{:else if !searchQuery && eventsKind1.length === 0}
  <div class="no-results">
    <span>No events found in the last 24 hours.</span>
  </div>
{:else if searchQuery && filteredEvents.length === 0}
  <div class="no-results">
    <p>No events found matching "{searchQuery}"</p>
    <button class="clear-search" on:click={handleSearchClear}>
      Clear search
    </button>
  </div>
{:else}
  {#if searchQuery}
    <div class="search-header">
      <h2>Search Results for "{searchQuery}"</h2>
      <button class="clear-search" on:click={handleSearchClear}>
        Clear search
      </button>
    </div>
  {/if}
  <div class="events-container">
    <EventGrid events={visibleEvents} {profiles} />
  </div>
{/if}

<style>
  .loading-overlay {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 2rem;
    text-align: center;
  }

  .loading-spinner {
    border: 4px solid #f3f3f3;
    border-top: 4px solid #3498db;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    animation: spin 1s linear infinite;
    margin-bottom: 1rem;
  }

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  .no-results {
    text-align: center;
    padding: 2rem;
  }

  .clear-search {
    background-color: #3498db;
    color: white;
    border: none;
    padding: 0.5rem 1rem;
    border-radius: 4px;
    cursor: pointer;
    margin-top: 1rem;
  }

  .clear-search:hover {
    background-color: #2980b9;
  }

  .search-header {
    padding: 1rem 2rem;
    display: flex;
    align-items: center;
    justify-content: space-between;
  }

  .events-container {
    width: 100%;
  }
</style>
